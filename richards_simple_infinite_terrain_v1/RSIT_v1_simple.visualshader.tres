[gd_resource type="VisualShader" load_steps=15 format=2]

[sub_resource type="VisualShaderNodeExpression" id=55]
size = Vector2( 611.6, 321 )
expression = "// return the world pos of the UV (swapping Z with Y so the texture projects downwards)
// (different from the vertex version)
//
// https://godotengine.org/qa/58311/how-to-in-shader-get-the-pixels-3d-coordinate-local-and-global

world_coor_out = (CAMERA_MATRIX * vec4(VERTEX, 1.0)).xzy; // convert UV  pos to world pos

"

[sub_resource type="VisualShaderNodeScalarOp" id=57]
default_input_values = [ 0, 1.0, 1, 0.0 ]
operator = 1

[sub_resource type="VisualShaderNodeTextureUniform" id=46]
uniform_name = "albedo_texture"

[sub_resource type="VisualShaderNodeTextureUniform" id=47]
uniform_name = "normal_texture"

[sub_resource type="VisualShaderNodeVectorOp" id=49]
operator = 2

[sub_resource type="VisualShaderNodeVec3Uniform" id=50]
uniform_name = "uv_scale"
default_value_enabled = true
default_value = Vector3( 1, 1, 1 )

[sub_resource type="VisualShaderNodeTextureUniform" id=51]
uniform_name = "roughness_texture"

[sub_resource type="VisualShaderNodeVectorDecompose" id=52]

[sub_resource type="VisualShaderNodeExpression" id=58]
size = Vector2( 739.08, 514.32 )
expression = "

vertex_out = VERTEX; // default return the same position through

vec3 WORLD_VERTEX = (WORLD_MATRIX * vec4(VERTEX, 1.0)).xyz; // convert model pos to world pos

vec3 main_vertex = WORLD_VERTEX; // WORLD COOR MODE
main_vertex /= terrain_scale;
main_vertex += offset; // extra offset added for debug

float height = _get_height2(main_vertex.xz, terrain_scale.y); // we added scale to the heught
vertex_out.y += height;


vec3 kick_me = main_vertex;

normal_out = _get_normal2(main_vertex, normal_scale * terrain_scale.y); // normals are too steep, so we have normal_scale"

[sub_resource type="VisualShaderNodeTextureUniform" id=39]
uniform_name = "heightmap_texture"
color_default = 1

[sub_resource type="VisualShaderNodeGlobalExpression" id=42]
size = Vector2( 508.8, 690.04 )
expression = "


float _get_height(vec2 _uv){
	return texture(heightmap_texture,_uv).r;
}

vec3 _get_normal(vec3 _vertex){
	
//https://docs.godotengine.org/en/3.0/tutorials/3d/vertex_displacement_with_shaders.html
	vec2 _e = vec2(0.01, 0.0);
	vec3 _normal = normalize(vec3(
		_get_height(_vertex.xz - _e) - 
		_get_height(_vertex.xz + _e), 2.0 * _e.x, 
		_get_height(_vertex.xz - _e.yx) - 
		_get_height(_vertex.xz + _e.yx)));

	return _normal;
}



// if height if not repeating, you need the texture to be set to repeat!
float _get_height2(vec2 _uv, float _scale){
	return texture(heightmap_texture,_uv).r * _scale;
}


vec3 _get_normal2(vec3 _vertex, float _scale){
	
//https://docs.godotengine.org/en/3.0/tutorials/3d/vertex_displacement_with_shaders.html
	vec2 _e = vec2(0.01, 0.0);
	vec3 _normal = normalize(vec3(
		_get_height2(_vertex.xz - _e, _scale) - 
		_get_height2(_vertex.xz + _e, _scale), 2.0 * _e.x, 
		_get_height2(_vertex.xz - _e.yx, _scale) - 
		_get_height2(_vertex.xz + _e.yx, _scale)));

	return _normal;
}







"

[sub_resource type="VisualShaderNodeVec3Uniform" id=44]
uniform_name = "terrain_scale"
default_value_enabled = true
default_value = Vector3( 256, 64, 256 )

[sub_resource type="VisualShaderNodeVec3Uniform" id=45]
uniform_name = "offset"
default_value_enabled = true
default_value = Vector3( 0.5, 0, 0.5 )

[sub_resource type="VisualShaderNodeScalarUniform" id=53]
uniform_name = "normal_scale"
default_value_enabled = true
default_value = 1.0

[resource]
code = "shader_type spatial;
render_mode specular_schlick_ggx, async_visible;

uniform sampler2D heightmap_texture : hint_black;
uniform vec3 terrain_scale = vec3(256.000000, 64.000000, 256.000000);
uniform vec3 offset = vec3(0.500000, 0.000000, 0.500000);
uniform float normal_scale = 1;
uniform vec3 uv_scale = vec3(1.000000, 1.000000, 1.000000);
uniform sampler2D albedo_texture;
uniform sampler2D roughness_texture;
uniform sampler2D normal_texture;


// GlobalExpression:0
	
	
	
	float _get_height(vec2 _uv){
		return texture(heightmap_texture,_uv).r;
	}
	
	vec3 _get_normal(vec3 _vertex){
		
	//https://docs.godotengine.org/en/3.0/tutorials/3d/vertex_displacement_with_shaders.html
		vec2 _e = vec2(0.01, 0.0);
		vec3 _normal = normalize(vec3(
			_get_height(_vertex.xz - _e) - 
			_get_height(_vertex.xz + _e), 2.0 * _e.x, 
			_get_height(_vertex.xz - _e.yx) - 
			_get_height(_vertex.xz + _e.yx)));
	
		return _normal;
	}
	
	
	
	// if height if not repeating, you need the texture to be set to repeat!
	float _get_height2(vec2 _uv, float _scale){
		return texture(heightmap_texture,_uv).r * _scale;
	}
	
	
	vec3 _get_normal2(vec3 _vertex, float _scale){
		
	//https://docs.godotengine.org/en/3.0/tutorials/3d/vertex_displacement_with_shaders.html
		vec2 _e = vec2(0.01, 0.0);
		vec3 _normal = normalize(vec3(
			_get_height2(_vertex.xz - _e, _scale) - 
			_get_height2(_vertex.xz + _e, _scale), 2.0 * _e.x, 
			_get_height2(_vertex.xz - _e.yx, _scale) - 
			_get_height2(_vertex.xz + _e.yx, _scale)));
	
		return _normal;
	}
	
	
	
	
	
	
	
	

void vertex() {
// VectorUniform:7
	vec3 n_out7p0 = terrain_scale;

// VectorUniform:8
	vec3 n_out8p0 = offset;

// ScalarUniform:9
	float n_out9p0 = normal_scale;

// Expression:10
	vec3 n_out10p0;
	vec3 n_out10p1;
	n_out10p0 = vec3(0.0, 0.0, 0.0);
	n_out10p1 = vec3(0.0, 0.0, 0.0);
	{
		
		
		n_out10p0 = VERTEX; // default return the same position through
		
		vec3 WORLD_VERTEX = (WORLD_MATRIX * vec4(VERTEX, 1.0)).xyz; // convert model pos to world pos
		
		vec3 main_vertex = WORLD_VERTEX; // WORLD COOR MODE
		main_vertex /= n_out7p0;
		main_vertex += n_out8p0; // extra n_out8p0 added for debug
		
		float height = _get_height2(main_vertex.xz, n_out7p0.y); // we added scale to the heught
		n_out10p0.y += height;
		
		
		vec3 kick_me = main_vertex;
		
		n_out10p1 = _get_normal2(main_vertex, n_out9p0 * n_out7p0.y); // normals are too steep, so we have normal_scale
	}

// Output:0
	VERTEX = n_out10p0;
	NORMAL = n_out10p1;

}

void fragment() {
// VectorUniform:6
	vec3 n_out6p0 = uv_scale;

// Expression:10
	vec3 n_out10p0;
	n_out10p0 = vec3(0.0, 0.0, 0.0);
	{
		// return the world pos of the UV (swapping Z with Y so the texture projects downwards)
		// (different from the vertex version)
		//
		// https://godotengine.org/qa/58311/how-to-in-shader-get-the-pixels-3d-coordinate-local-and-global
		
		n_out10p0 = (CAMERA_MATRIX * vec4(VERTEX, 1.0)).xzy; // convert UV  pos to world pos
		
		
	}

// VectorOp:5
	vec3 n_out5p0 = n_out6p0 * n_out10p0;

// TextureUniform:2
	vec3 n_out2p0;
	float n_out2p1;
	{
		vec4 n_tex_read = texture(albedo_texture, n_out5p0.xy);
		n_out2p0 = n_tex_read.rgb;
		n_out2p1 = n_tex_read.a;
	}

// TextureUniform:7
	vec3 n_out7p0;
	float n_out7p1;
	{
		vec4 n_tex_read = texture(roughness_texture, n_out5p0.xy);
		n_out7p0 = n_tex_read.rgb;
		n_out7p1 = n_tex_read.a;
	}

// VectorDecompose:8
	float n_out8p0 = n_out7p0.x;
	float n_out8p1 = n_out7p0.y;
	float n_out8p2 = n_out7p0.z;

// ScalarOp:11
	float n_in11p0 = 1.00000;
	float n_out11p0 = n_in11p0 - n_out8p0;

// TextureUniform:3
	vec3 n_out3p0;
	float n_out3p1;
	{
		vec4 n_tex_read = texture(normal_texture, n_out5p0.xy);
		n_out3p0 = n_tex_read.rgb;
		n_out3p1 = n_tex_read.a;
	}

// Output:0
	ALBEDO = n_out2p0;
	ROUGHNESS = n_out11p0;
	NORMALMAP = n_out3p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -246.013, 320.543 )
nodes/vertex/0/position = Vector2( 920, 0 )
nodes/vertex/3/node = SubResource( 39 )
nodes/vertex/3/position = Vector2( -260, 0 )
nodes/vertex/4/node = SubResource( 42 )
nodes/vertex/4/position = Vector2( -1000, 0 )
nodes/vertex/4/size = Vector2( 508.8, 690.04 )
nodes/vertex/4/input_ports = ""
nodes/vertex/4/output_ports = ""
nodes/vertex/4/expression = "


float _get_height(vec2 _uv){
	return texture(heightmap_texture,_uv).r;
}

vec3 _get_normal(vec3 _vertex){
	
//https://docs.godotengine.org/en/3.0/tutorials/3d/vertex_displacement_with_shaders.html
	vec2 _e = vec2(0.01, 0.0);
	vec3 _normal = normalize(vec3(
		_get_height(_vertex.xz - _e) - 
		_get_height(_vertex.xz + _e), 2.0 * _e.x, 
		_get_height(_vertex.xz - _e.yx) - 
		_get_height(_vertex.xz + _e.yx)));

	return _normal;
}



// if height if not repeating, you need the texture to be set to repeat!
float _get_height2(vec2 _uv, float _scale){
	return texture(heightmap_texture,_uv).r * _scale;
}


vec3 _get_normal2(vec3 _vertex, float _scale){
	
//https://docs.godotengine.org/en/3.0/tutorials/3d/vertex_displacement_with_shaders.html
	vec2 _e = vec2(0.01, 0.0);
	vec3 _normal = normalize(vec3(
		_get_height2(_vertex.xz - _e, _scale) - 
		_get_height2(_vertex.xz + _e, _scale), 2.0 * _e.x, 
		_get_height2(_vertex.xz - _e.yx, _scale) - 
		_get_height2(_vertex.xz + _e.yx, _scale)));

	return _normal;
}







"
nodes/vertex/7/node = SubResource( 44 )
nodes/vertex/7/position = Vector2( -480, 180 )
nodes/vertex/8/node = SubResource( 45 )
nodes/vertex/8/position = Vector2( -480, 320 )
nodes/vertex/9/node = SubResource( 53 )
nodes/vertex/9/position = Vector2( -340, 460 )
nodes/vertex/10/node = SubResource( 58 )
nodes/vertex/10/position = Vector2( 0, 180 )
nodes/vertex/10/size = Vector2( 739.08, 514.32 )
nodes/vertex/10/input_ports = "0,4,heightmap_texture;1,1,terrain_scale;2,1,offset;3,0,normal_scale;"
nodes/vertex/10/output_ports = "0,1,vertex_out;1,1,normal_out;"
nodes/vertex/10/expression = "

vertex_out = VERTEX; // default return the same position through

vec3 WORLD_VERTEX = (WORLD_MATRIX * vec4(VERTEX, 1.0)).xyz; // convert model pos to world pos

vec3 main_vertex = WORLD_VERTEX; // WORLD COOR MODE
main_vertex /= terrain_scale;
main_vertex += offset; // extra offset added for debug

float height = _get_height2(main_vertex.xz, terrain_scale.y); // we added scale to the heught
vertex_out.y += height;


vec3 kick_me = main_vertex;

normal_out = _get_normal2(main_vertex, normal_scale * terrain_scale.y); // normals are too steep, so we have normal_scale"
nodes/vertex/connections = PoolIntArray( 7, 0, 10, 1, 8, 0, 10, 2, 3, 2, 10, 0, 10, 0, 0, 0, 10, 1, 0, 1, 9, 0, 10, 3 )
nodes/fragment/0/position = Vector2( 1200, 20 )
nodes/fragment/2/node = SubResource( 46 )
nodes/fragment/2/position = Vector2( 800, -60 )
nodes/fragment/3/node = SubResource( 47 )
nodes/fragment/3/position = Vector2( 820, 260 )
nodes/fragment/5/node = SubResource( 49 )
nodes/fragment/5/position = Vector2( 420, 180 )
nodes/fragment/6/node = SubResource( 50 )
nodes/fragment/6/position = Vector2( -20, 40 )
nodes/fragment/7/node = SubResource( 51 )
nodes/fragment/7/position = Vector2( 600, 120 )
nodes/fragment/8/node = SubResource( 52 )
nodes/fragment/8/position = Vector2( 800, 140 )
nodes/fragment/10/node = SubResource( 55 )
nodes/fragment/10/position = Vector2( -220, 200 )
nodes/fragment/10/size = Vector2( 611.6, 321 )
nodes/fragment/10/input_ports = ""
nodes/fragment/10/output_ports = "0,1,world_coor_out;"
nodes/fragment/10/expression = "// return the world pos of the UV (swapping Z with Y so the texture projects downwards)
// (different from the vertex version)
//
// https://godotengine.org/qa/58311/how-to-in-shader-get-the-pixels-3d-coordinate-local-and-global

world_coor_out = (CAMERA_MATRIX * vec4(VERTEX, 1.0)).xzy; // convert UV  pos to world pos

"
nodes/fragment/11/node = SubResource( 57 )
nodes/fragment/11/position = Vector2( 1020, 100 )
nodes/fragment/connections = PoolIntArray( 2, 0, 0, 0, 6, 0, 5, 0, 5, 0, 2, 0, 5, 0, 3, 0, 7, 0, 8, 0, 5, 0, 7, 0, 3, 0, 0, 8, 10, 0, 5, 1, 8, 0, 11, 1, 11, 0, 0, 3 )
